// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipam.proto

/*
Package vpcnet is a generated protocol buffer package.

It is generated from these files:
	ipam.proto

It has these top-level messages:
	AddRequest
	AddResponse
	DelRequest
	DelResponse
*/
package vpcnet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=ContainerID" json:"ContainerID,omitempty"`
	PodID       string `protobuf:"bytes,2,opt,name=PodID" json:"PodID,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AddRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type AddResponse struct {
	AllocatedIP string `protobuf:"bytes,1,opt,name=AllocatedIP" json:"AllocatedIP,omitempty"`
	ENIIP       string `protobuf:"bytes,2,opt,name=ENIIP" json:"ENIIP,omitempty"`
	SubnetCIDR  string `protobuf:"bytes,3,opt,name=SubnetCIDR" json:"SubnetCIDR,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddResponse) GetAllocatedIP() string {
	if m != nil {
		return m.AllocatedIP
	}
	return ""
}

func (m *AddResponse) GetENIIP() string {
	if m != nil {
		return m.ENIIP
	}
	return ""
}

func (m *AddResponse) GetSubnetCIDR() string {
	if m != nil {
		return m.SubnetCIDR
	}
	return ""
}

type DelRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=ContainerID" json:"ContainerID,omitempty"`
}

func (m *DelRequest) Reset()                    { *m = DelRequest{} }
func (m *DelRequest) String() string            { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()               {}
func (*DelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DelRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

type DelResponse struct {
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*AddRequest)(nil), "vpcnet.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "vpcnet.AddResponse")
	proto.RegisterType((*DelRequest)(nil), "vpcnet.DelRequest")
	proto.RegisterType((*DelResponse)(nil), "vpcnet.DelResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IPAM service

type IPAMClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type iPAMClient struct {
	cc *grpc.ClientConn
}

func NewIPAMClient(cc *grpc.ClientConn) IPAMClient {
	return &iPAMClient{cc}
}

func (c *iPAMClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/vpcnet.IPAM/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/vpcnet.IPAM/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IPAM service

type IPAMServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
}

func RegisterIPAMServer(s *grpc.Server, srv IPAMServer) {
	s.RegisterService(&_IPAM_serviceDesc, srv)
}

func _IPAM_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcnet.IPAM/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAM_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcnet.IPAM/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpcnet.IPAM",
	HandlerType: (*IPAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _IPAM_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _IPAM_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipam.proto",
}

func init() { proto.RegisterFile("ipam.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xc5, 0x20,
	0x18, 0x85, 0xef, 0xf5, 0xea, 0x4d, 0xfc, 0x1b, 0x17, 0x74, 0x68, 0x1c, 0x4c, 0xc3, 0xe4, 0x44,
	0x8c, 0x3e, 0x01, 0x29, 0x0e, 0x0c, 0x1a, 0x52, 0x9f, 0xa0, 0x2d, 0xff, 0x50, 0x83, 0x80, 0x2d,
	0xf5, 0xf9, 0x4d, 0x21, 0x0d, 0xb8, 0x39, 0xfe, 0xe7, 0x70, 0x3e, 0x4e, 0x0e, 0xc0, 0xe4, 0xfb,
	0x2f, 0xe6, 0x67, 0x17, 0x1c, 0x39, 0xff, 0xf8, 0xd1, 0x62, 0xa0, 0x02, 0x80, 0x6b, 0xdd, 0xe1,
	0xf7, 0x8a, 0x4b, 0x20, 0x0d, 0x54, 0xad, 0xb3, 0xa1, 0x9f, 0x2c, 0xce, 0x52, 0xd4, 0xc7, 0xe6,
	0xf8, 0x78, 0xdd, 0x95, 0x12, 0xb9, 0x83, 0x2b, 0xe5, 0xb4, 0x14, 0xf5, 0x45, 0xf4, 0xd2, 0x41,
	0x11, 0xaa, 0x48, 0x59, 0xbc, 0xb3, 0x0b, 0x6e, 0x18, 0x6e, 0x8c, 0x1b, 0xfb, 0x80, 0x5a, 0xaa,
	0x1d, 0x53, 0x48, 0x1b, 0xe6, 0xf5, 0x5d, 0x4a, 0xb5, 0x63, 0xe2, 0x41, 0x1e, 0x00, 0x3e, 0xd6,
	0xc1, 0x62, 0x68, 0xa5, 0xe8, 0xea, 0x53, 0xb4, 0x0a, 0x85, 0x32, 0x00, 0x81, 0xe6, 0xdf, 0x65,
	0xe9, 0x0d, 0x54, 0xf1, 0x7d, 0xaa, 0xf5, 0xfc, 0x09, 0x97, 0x52, 0xf1, 0x37, 0xf2, 0x04, 0x27,
	0xae, 0x35, 0x21, 0x2c, 0x6d, 0xc0, 0xf2, 0x00, 0xf7, 0xb7, 0x7f, 0xb4, 0x94, 0xa3, 0x87, 0x2d,
	0x21, 0xd0, 0xe4, 0x44, 0x6e, 0x91, 0x13, 0xc5, 0x4f, 0xf4, 0x30, 0x9c, 0xe3, 0xcc, 0x2f, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x6c, 0xa9, 0x22, 0x74, 0x01, 0x00, 0x00,
}
