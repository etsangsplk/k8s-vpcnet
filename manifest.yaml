apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: eni-controller
  namespace: space-system
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: eni-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eni-controller
  template:
    metadata:
      labels:
      #  k8s-addon: cluster-autoscaler.addons.k8s.io
        app: eni-controller
      annotations:
        # use this to force deploy updates
        template/timestamp: "{{TIMESTAMP}}"
    spec:
      serviceAccountName:  eni-controller
      hostNetwork: true
      containers:
        - name:  eni-controller
          image: lstoll/eni-controller:{{VERSION_TAG}}
          imagePullPolicy: Always
          args:
            - eni-controller
            - --v=2
          resources:
          # TODO -assess these limits
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
      # Schedule on the master. Because this is critical for networking, we
      # can't bring up any pods until this is running. To avoid all runtimes
      # needing IAM privs to manage interfaces, we can run it in a cluster
      # privileged context, ignoring network setup restrictions
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          effect: NoSchedule
        - key: "k8s-vpcnet/no-interface-configured"
          effect: NoSchedule
      hostNetwork: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: eni-controller
  name: eni-controller
  namespace: space-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: eni-controller
  namespace: space-system
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: eni-controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - watch
  - list
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name:  eni-controller
  namespace: space-system
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: eni-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name:  eni-controller
subjects:
  - kind: ServiceAccount
    name:  eni-controller
    namespace: space-system
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: vpcnet-configure
  namespace: space-system
  labels:
    app: vpcnet-configure
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: vpcnet-configure
      annotations:
        # use this to force deploy updates
        template/timestamp: "{{TIMESTAMP}}"
    spec:
      hostNetwork: true
      serviceAccountName: vpcnet-configure
      containers:
        - name: vpcnet-configure
          image: lstoll/vpcnet-configure:{{VERSION_TAG}}
          imagePullPolicy: Always
          args:
            - vpcnet-configure
            - --v=2
          securityContext:
            # This is so we can manage interfaces
            privileged: true
          volumeMounts:
            - mountPath: /var/lib/cni
              name: cnidir
      volumes:
        - name: cnidir
          hostPath:
            path: /var/lib/cni
      tolerations:
        - key: "k8s-vpcnet/no-interface-configured"
          effect: NoSchedule
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: vpcnet-configure
  name: vpcnet-configure
  namespace: space-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: vpcnet-configure
  namespace: space-system
  labels:
  #  k8s-addon: cluster-autoscaler.addons.k8s.io
    app: vpcnet-configure
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - watch
  - list
  - get
  - update
---
